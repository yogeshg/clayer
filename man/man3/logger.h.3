.TH "/home/travis/build/yogeshg/clayer/include/logger.h" 3 "Sun Jun 28 2020" "Clayer" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/travis/build/yogeshg/clayer/include/logger.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <memory>\fP
.br
\fC#include <mutex>\fP
.br
\fC#include <type_traits>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBlogger::ContextInfo\fP"
.br
.RI "\fIA plain-old-data container for the fixed code context of a log record\&. Necessary to propagate context information from the predefined macros\&. Auxiliary, short-lived class with life-time the duration of the log command\&. \fP"
.ti -1c
.RI "struct \fBlogger::Line\fP"
.br
.RI "\fIA structure representing all the information about a particular logging line\&. Includes contextual and message information\&. \fP"
.ti -1c
.RI "class \fBlogger::hash::Flag< Val >\fP"
.br
.RI "\fITemplate class for template overloading hash settings in logger stream operators\&. \fP"
.ti -1c
.RI "class \fBlogger::Record< fmt, Stream, props >\fP"
.br
.RI "\fIA catch-all class for storing a log line record and printing it according to a format\&. \fP"
.ti -1c
.RI "class \fBlogger::NoRecord\fP"
.br
.RI "\fIA record that eats and throws away objects streamed to it\&. Used for compile-time filtering\&. Can also be used as a no-op streamer\&. \fP"
.ti -1c
.RI "class \fBlogger::Logger< Stream, threshold, fmt, props >\fP"
.br
.RI "\fIThe wrapper/aggregator class for logging commands\&. Template-parameterized by format and logging threshold for compile-time configuration\&. \fP"
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "\fBlogger\fP"
.br
.ti -1c
.RI "\fBlogger::hash\fP"
.br
.RI "\fIFunctionality related to specifying if a component of a log message should influence the hash of the message or not\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "template<typename Stream > using \fBlogger::Prop\fP = void(*)(Stream &, const Line &)"
.br
.RI "\fIProp represents contextual properties printable in logs as part of the formatting\&. \fP"
.ti -1c
.RI "using \fBlogger::Filter\fP = bool(*)(Line &)"
.br
.RI "\fIFilter represents post-processing on Lines that could entail content manipulation (modifying the argument) or deletion (returning false)\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename Stream > void \fBlogger::prop_msg\fP (Stream &o, const Line &l)"
.br
.RI "\fIA Prop that prints the message component to a log stream\&. \fP"
.ti -1c
.RI "template<typename Stream > void \fBlogger::prop_hash\fP (Stream &o, const Line &l)"
.br
.RI "\fIA Prop that prints the hash identifier in hexadecimal of a log to a log stream\&. \fP"
.ti -1c
.RI "template<typename Stream > void \fBlogger::prop_func\fP (Stream &o, const Line &l)"
.br
.RI "\fIA Prop that prints the function name to a log stream\&. \fP"
.ti -1c
.RI "template<typename Stream > void \fBlogger::prop_file\fP (Stream &o, const Line &l)"
.br
.RI "\fIA Prop that prints the filename to a log stream\&. \fP"
.ti -1c
.RI "template<typename Stream > void \fBlogger::prop_line\fP (Stream &o, const Line &l)"
.br
.RI "\fIA Prop that prints the line number to a log stream\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "template<typename T > concept bool \fBlogger::Stream\fP"
.br
.RI "\fIA Stream is something that implements << for strings at the very least\&. More generally it can implement << for any type, but for we require << for strings given the context in a logging library\&. \fP"
.ti -1c
.RI "template<typename T > concept bool \fBlogger::Streamable\fP"
.br
.RI "\fIReproduced in \fBproperty\&.h\fP, something is Streamable if an ostream can stream it\&. We don't refer to our Stream concept above because practically in our library every Stream forwards to some underlying ostream\&. \fP"
.ti -1c
.RI "const Flag< true > & \fBlogger::hash::on\fP = Flag<true>::inst"
.br
.ti -1c
.RI "const Flag< false > & \fBlogger::hash::off\fP = Flag<false>::inst"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Clayer from the source code\&.
